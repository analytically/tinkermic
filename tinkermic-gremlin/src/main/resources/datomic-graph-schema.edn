[
    ;; Tinkermic Graph Schema

     ;; The external element id
    {:db/id #db/id[:db.part/db]
     :db/ident :graph.element/id
     :db/valueType :db.type/uuid
     :db/cardinality :db.cardinality/one
     :db/doc "The external ID of an element (using Peer.squuid() to generate an index-friendly UUID)"
     :db/index true
     :db.install/_attribute :db.part/db}

     ;; The incoming vertex of an edge attribute
    {:db/id #db/id[:db.part/db]
     :db/ident :graph.edge/inVertex
     :db/valueType :db.type/ref
     :db/cardinality :db.cardinality/one
     :db/doc "The incoming vertex of an edge"
     :db/index true
     :db.install/_attribute :db.part/db}

     ;; The outgoing vertex of an edge attribute
    {:db/id #db/id[:db.part/db]
     :db/ident :graph.edge/outVertex
     :db/valueType :db.type/ref
     :db/cardinality :db.cardinality/one
     :db/doc "The outgoing vertex of an edge"
     :db/index true,
     :db.install/_attribute :db.part/db}

     ;; The label of an edge
    {:db/id #db/id[:db.part/db]
     :db/ident :graph.edge/label
     :db/valueType :db.type/string
     :db/cardinality :db.cardinality/one
     :db/doc "The label of an edge"
     :db/index true
     :db.install/_attribute :db.part/db}

     ;; The label of a vertex
     {:db/id #db/id[:db.part/db]
      :db/ident :graph.vertex/label
      :db/valueType :db.type/string
      :db/cardinality :db.cardinality/one
      :db/doc "The label of a vertex"
      :db/index true
      :db.install/_attribute :db.part/db}

     ;; The previous transactions through which the entity (vertex or edge) was changed
    {:db/id #db/id[:db.part/db]
     :db/ident :graph.element/previousTransactions
     :db/valueType :db.type/ref
     :db/cardinality :db.cardinality/many
     :db/doc "The previous transactions through which the entity (vertex or edge) was changed"
     :db/index true
     :db.install/_attribute :db.part/db}

      ;; The element id of the entity that was part of the previous transaction
     {:db/id #db/id[:db.part/db]
      :db/ident :graph.element/previousTransactions/elementId
      :db/valueType :db.type/ref
      :db/cardinality :db.cardinality/one
      :db/doc "The element id of the entity that was part of the previous transaction"
      :db/index true
      :db.install/_attribute :db.part/db}

      ;; The transaction id for the entity that was part of the previous transaction
     {:db/id #db/id[:db.part/db]
      :db/ident :graph.element/previousTransactions/transactionId
      :db/valueType :db.type/ref
      :db/cardinality :db.cardinality/one
      :db/doc "The transaction id for the entity that was part of the previous transaction"
      :db/index true
      :db.install/_attribute :db.part/db}

      ;; Database function that retrieves the previous transaction and sets the new one
     {:db/id #db/id[:db.part/user]
      :db/ident :add-transaction-info
      :db/fn #db/fn {
        :lang "java"
        :params [db id lastTransaction]
        :code "Object transactInfoId = tempid(\":db.part/user\"); return list(list(\":db/add\", transactInfoId, \":graph.element/previousTransactions/transactionId\", lastTransaction), list(\":db/add\", transactInfoId, \":graph.element/previousTransactions/elementId\", id), list(\":db/add\", tempid(\":db.part/tx\"), \":graph.element/previousTransactions\", transactInfoId));"
      }}

      ;; Add new vertex partition
     {:db/id #db/id[:db.part/db]
      :db/ident :vertex
      :db.install/_partition :db.part/db}

      ;; Add new edge partition
     {:db/id #db/id[:db.part/db]
      :db/ident :edge
      :db.install/_partition :db.part/db}
]
